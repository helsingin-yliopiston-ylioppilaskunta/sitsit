/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Status */
        get: operations["status__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Users */
        get: operations["read_users_users__get"];
        put?: never;
        /** Create User */
        post: operations["create_user_users__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One User */
        get: operations["get_one_user_users__user_id__get"];
        put?: never;
        post?: never;
        /** Delete User */
        delete: operations["delete_user_users__user_id__delete"];
        options?: never;
        head?: never;
        /** Update User */
        patch: operations["update_user_users__user_id__patch"];
        trace?: never;
    };
    "/orgs/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Orgs */
        get: operations["read_orgs_orgs__get"];
        put?: never;
        /** Create Org */
        post: operations["create_org_orgs__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orgs/{org_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Org */
        get: operations["get_one_org_orgs__org_id__get"];
        put?: never;
        post?: never;
        /** Delete Org */
        delete: operations["delete_org_orgs__org_id__delete"];
        options?: never;
        head?: never;
        /** Update Org */
        patch: operations["update_org_orgs__org_id__patch"];
        trace?: never;
    };
    "/collections/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Collections */
        get: operations["read_collections_collections__get"];
        put?: never;
        /** Create Collection */
        post: operations["create_collection_collections__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{collection_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Collection */
        get: operations["get_one_collection_collections__collection_id__get"];
        put?: never;
        post?: never;
        /** Delete Collection */
        delete: operations["delete_collection_collections__collection_id__delete"];
        options?: never;
        head?: never;
        /** Update Collection */
        patch: operations["update_collection_collections__collection_id__patch"];
        trace?: never;
    };
    "/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Groups */
        get: operations["read_groups_groups__get"];
        put?: never;
        /** Create Group */
        post: operations["create_group_groups__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/groups/{group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Group */
        get: operations["get_one_group_groups__group_id__get"];
        put?: never;
        post?: never;
        /** Delete Group */
        delete: operations["delete_group_groups__group_id__delete"];
        options?: never;
        head?: never;
        /** Update Group */
        patch: operations["update_group_groups__group_id__patch"];
        trace?: never;
    };
    "/resources/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Resources */
        get: operations["read_resources_resources__get"];
        put?: never;
        /** Create Resource */
        post: operations["create_resource_resources__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resources/{resource_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Resource */
        get: operations["get_one_resource_resources__resource_id__get"];
        put?: never;
        post?: never;
        /** Delete Resource */
        delete: operations["delete_resource_resources__resource_id__delete"];
        options?: never;
        head?: never;
        /** Update Resource */
        patch: operations["update_resource_resources__resource_id__patch"];
        trace?: never;
    };
    "/resourcetypes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Resourcetypes */
        get: operations["read_resourceTypes_resourcetypes__get"];
        put?: never;
        /** Create Resourcetype */
        post: operations["create_resourceType_resourcetypes__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/resourcetypes/{resourceType_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Resourcetype */
        get: operations["get_one_resourceType_resourcetypes__resourceType_id__get"];
        put?: never;
        post?: never;
        /** Delete Resourcetype */
        delete: operations["delete_resourceType_resourcetypes__resourceType_id__delete"];
        options?: never;
        head?: never;
        /** Update Resourcetype */
        patch: operations["update_resourceType_resourcetypes__resourceType_id__patch"];
        trace?: never;
    };
    "/reservations/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Reservations */
        get: operations["read_reservations_reservations__get"];
        put?: never;
        /** Create Reservation */
        post: operations["create_reservation_reservations__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reservations/{reservation_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Reservation */
        get: operations["get_one_reservation_reservations__reservation_id__get"];
        put?: never;
        post?: never;
        /** Delete Reservation */
        delete: operations["delete_reservation_reservations__reservation_id__delete"];
        options?: never;
        head?: never;
        /** Update Reservation */
        patch: operations["update_reservation_reservations__reservation_id__patch"];
        trace?: never;
    };
    "/reservationTimes/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Reservationtimes */
        get: operations["read_reservationTimes_reservationTimes__get"];
        put?: never;
        /** Create Reservationtime */
        post: operations["create_reservationTime_reservationTimes__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reservationTimes/{reservationTime_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Reservationtime */
        get: operations["get_one_reservationTime_reservationTimes__reservationTime_id__get"];
        put?: never;
        post?: never;
        /** Delete Reservationtime */
        delete: operations["delete_reservationTime_reservationTimes__reservationTime_id__delete"];
        options?: never;
        head?: never;
        /** Update Reservationtime */
        patch: operations["update_reservationTime_reservationTimes__reservationTime_id__patch"];
        trace?: never;
    };
    "/reservationResources/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Read Reservationresources */
        get: operations["read_reservationResources_reservationResources__get"];
        put?: never;
        /** Create Reservationresource */
        post: operations["create_reservationResource_reservationResources__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reservationResources/{reservationResource_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get One Reservationresource */
        get: operations["get_one_reservationResource_reservationResources__reservationResource_id__get"];
        put?: never;
        post?: never;
        /** Delete Reservationresource */
        delete: operations["delete_reservationResource_reservationResources__reservationResource_id__delete"];
        options?: never;
        head?: never;
        /** Update Reservationresource */
        patch: operations["update_reservationResource_reservationResources__reservationResource_id__patch"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** CreateCollection */
        CreateCollection: {
            /** Name */
            name?: string;
        };
        /** CreateGroup */
        CreateGroup: {
            /** Name */
            name?: string;
            /** Collection Id */
            collection_id: number;
        };
        /** CreateOrg */
        CreateOrg: {
            /** Name */
            name?: string;
        };
        /** CreateReservation */
        CreateReservation: {
            /** Name */
            name?: string;
            /** User Id */
            user_id: number;
            /** Contact Info */
            contact_info: string | null;
            /** Description */
            description: string | null;
        };
        /** CreateReservationResource */
        CreateReservationResource: {
            /** Reservation Id */
            reservation_id?: number;
            /** Resource Id */
            resource_id: number;
        };
        /** CreateReservationTime */
        CreateReservationTime: {
            /** Reservation Id */
            reservation_id?: number;
            /**
             * Start
             * Format: date-time
             */
            start: string;
            /**
             * End
             * Format: date-time
             */
            end: string;
        };
        /** CreateResource */
        CreateResource: {
            /** Name */
            name?: string;
            /** Group Id */
            group_id: number;
            /** Resource Type Id */
            resource_type_id: number;
        };
        /** CreateResourceType */
        CreateResourceType: {
            /** Name */
            name?: string;
        };
        /** CreateUser */
        CreateUser: {
            /** Username */
            username?: string;
            /** Hash */
            hash: string;
            /** Org Id */
            org_id: number;
        };
        /** DBResource */
        DBResource: {
            /** Name */
            name?: string;
            /** Id */
            id?: number | null;
            /** Group Id */
            group_id?: number | null;
            /** Resource Type Id */
            resource_type_id?: number | null;
            /**
             * Active
             * @default true
             */
            active: boolean;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** PublicCollection */
        PublicCollection: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
        };
        /** PublicCollectionWithGroups */
        PublicCollectionWithGroups: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
            /** Groups */
            groups: components["schemas"]["PublicGroupWithResources"][];
        };
        /** PublicGroup */
        PublicGroup: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
            /** Collection Id */
            collection_id: number;
        };
        /** PublicGroupWithCollection */
        PublicGroupWithCollection: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
            collection: components["schemas"]["PublicCollection"];
        };
        /** PublicGroupWithCollectionAndResources */
        PublicGroupWithCollectionAndResources: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
            collection: components["schemas"]["PublicCollection"];
            /** Resources */
            resources: components["schemas"]["PublicResourceWithResourceType"][];
        };
        /** PublicGroupWithResources */
        PublicGroupWithResources: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
            /** Resources */
            resources: components["schemas"]["PublicResourceWithResourceType"][];
        };
        /** PublicOrg */
        PublicOrg: {
            /** Name */
            name: string;
            /** Id */
            id: number;
        };
        /** PublicOrgWithUsers */
        PublicOrgWithUsers: {
            /** Name */
            name: string;
            /** Users */
            users: components["schemas"]["PublicUser"][];
        };
        /** PublicReservation */
        PublicReservation: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
            /** User Id */
            user_id: number;
            /** Contact Info */
            contact_info: string | null;
            /** Description */
            description: string | null;
        };
        /** PublicReservationResource */
        PublicReservationResource: {
            /** Reservation Id */
            reservation_id?: number;
            /** Id */
            id: number;
            /** Resource Id */
            resource_id: number;
        };
        /** PublicReservationResourceWithResource */
        PublicReservationResourceWithResource: {
            /** Reservation Id */
            reservation_id?: number;
            /** Id */
            id: number;
            resource: components["schemas"]["DBResource"];
        };
        /** PublicReservationTime */
        PublicReservationTime: {
            /** Reservation Id */
            reservation_id?: number;
            /** Id */
            id: number;
            /**
             * Start
             * Format: date-time
             */
            start: string;
            /**
             * End
             * Format: date-time
             */
            end: string;
        };
        /** PublicReservationWithUserAndTimesAndResources */
        PublicReservationWithUserAndTimesAndResources: {
            /** Name */
            name: string;
            /** Id */
            id: number;
            user: components["schemas"]["PublicUserWithOrg"];
            /** Times */
            times: components["schemas"]["PublicReservationTime"][];
            /** Resources */
            resources: components["schemas"]["PublicReservationResourceWithResource"][];
            /** Contact Info */
            contact_info: string | null;
            /** Description */
            description: string | null;
        };
        /** PublicResource */
        PublicResource: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
            /** Group Id */
            group_id: number;
            /** Resource Type Id */
            resource_type_id: number;
        };
        /** PublicResourceType */
        PublicResourceType: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
        };
        /** PublicResourceWithGroupAndResourceType */
        PublicResourceWithGroupAndResourceType: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
            group: components["schemas"]["PublicGroup"];
            resource_type: components["schemas"]["PublicResourceType"];
        };
        /** PublicResourceWithResourceType */
        PublicResourceWithResourceType: {
            /** Name */
            name?: string;
            /** Id */
            id: number;
            resource_type: components["schemas"]["PublicResourceType"];
        };
        /** PublicUser */
        PublicUser: {
            /** Username */
            username?: string;
            /** Id */
            id: number;
            /** Org Id */
            org_id: number | null;
        };
        /** PublicUserWithOrg */
        PublicUserWithOrg: {
            /** Username */
            username?: string;
            /** Id */
            id: number;
            org: components["schemas"]["PublicOrg"] | null;
        };
        /** UpdateCollection */
        UpdateCollection: {
            /** Name */
            name?: string;
        };
        /** UpdateGroup */
        UpdateGroup: {
            /** Name */
            name?: string;
            /** Collection Id */
            collection_id: number;
        };
        /** UpdateOrg */
        UpdateOrg: {
            /** Name */
            name?: string;
        };
        /** UpdateReservation */
        UpdateReservation: {
            /** Name */
            name?: string;
            /** User Id */
            user_id: number;
            /** Contact Info */
            contact_info: string | null;
            /** Description */
            description: string | null;
        };
        /** UpdateReservationResource */
        UpdateReservationResource: {
            /** Reservation Id */
            reservation_id?: number;
            /** Resource Id */
            resource_id: number;
        };
        /** UpdateReservationTime */
        UpdateReservationTime: {
            /** Reservation Id */
            reservation_id?: number;
            /**
             * Start
             * Format: date-time
             */
            start: string;
            /**
             * End
             * Format: date-time
             */
            end: string;
        };
        /** UpdateResource */
        UpdateResource: {
            /** Name */
            name?: string;
            /** Group Id */
            group_id: number;
            /** Resource Type Id */
            resource_type_id: number;
        };
        /** UpdateResourceType */
        UpdateResourceType: {
            /** Name */
            name?: string;
        };
        /** UpdateUser */
        UpdateUser: {
            /** Username */
            username?: string;
            /** Hash */
            hash: string;
            /** Org Id */
            org_id: number | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    status__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    read_users_users__get: {
        parameters: {
            query?: {
                org?: number | null;
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUserWithOrg"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_user_users__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUser"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUser"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_user_users__user_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUserWithOrg"] | null;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_user_users__user_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_user_users__user_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                user_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUser"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUserWithOrg"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_orgs_orgs__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicOrg"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_org_orgs__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrg"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicOrg"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_org_orgs__org_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicOrgWithUsers"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_org_orgs__org_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_org_orgs__org_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrg"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicOrgWithUsers"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_collections_collections__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicCollectionWithGroups"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_collection_collections__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCollection"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicCollection"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_collection_collections__collection_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                collection_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicCollectionWithGroups"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_collection_collections__collection_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                collection_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_collection_collections__collection_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                collection_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCollection"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicCollection"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_groups_groups__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicGroupWithCollection"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_group_groups__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateGroup"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicGroup"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_group_groups__group_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicGroupWithCollectionAndResources"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_group_groups__group_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_group_groups__group_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                group_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateGroup"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicGroup"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_resources_resources__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicResourceWithGroupAndResourceType"][];
                };
            };
        };
    };
    create_resource_resources__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateResource"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicResource"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_resource_resources__resource_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicResourceWithGroupAndResourceType"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resource_resources__resource_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_resource_resources__resource_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                resource_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateResource"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicResource"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_resourceTypes_resourcetypes__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicResourceType"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_resourceType_resourcetypes__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateResourceType"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicResourceType"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_resourceType_resourcetypes__resourceType_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                resourceType_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicResourceType"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_resourceType_resourcetypes__resourceType_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                resourceType_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_resourceType_resourcetypes__resourceType_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                resourceType_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateResourceType"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicResourceType"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_reservations_reservations__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationWithUserAndTimesAndResources"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_reservation_reservations__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReservation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservation"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_reservation_reservations__reservation_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationWithUserAndTimesAndResources"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_reservation_reservations__reservation_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_reservation_reservations__reservation_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservation_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateReservation"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservation"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_reservationTimes_reservationTimes__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationTime"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_reservationTime_reservationTimes__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReservationTime"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationTime"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_reservationTime_reservationTimes__reservationTime_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationTime_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationTime"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_reservationTime_reservationTimes__reservationTime_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationTime_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_reservationTime_reservationTimes__reservationTime_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationTime_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateReservationTime"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationTime"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    read_reservationResources_reservationResources__get: {
        parameters: {
            query?: {
                offset?: number;
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationResource"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_reservationResource_reservationResources__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReservationResource"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationResource"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_one_reservationResource_reservationResources__reservationResource_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationResource_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationResource"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_reservationResource_reservationResources__reservationResource_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationResource_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_reservationResource_reservationResources__reservationResource_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                reservationResource_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateReservationResource"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicReservationResource"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
